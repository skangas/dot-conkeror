// -*- mode: js -*-

require("new-tabs.js");
require("session.js");
// require("favicon"); // XXX: added to conkeror 2010-12-29, not in squeeze


// function my_prefs () {
// openDialog("chrome://browser/content/pref/pref.xul", "PrefWindow", "chrome,titlebar,resizable,modal", "catFeaturesbutton");
// }

// add_command("prefs", my_prefs, []);

//// User Variables http://conkeror.org/UserVariables

// Don't let kill-buffer close the window
can_kill_last_buffer = false;

// don't use a new window for the download buffer
download_buffer_automatic_open_target = [OPEN_NEW_BUFFER_BACKGROUND, OPEN_NEW_WINDOW];

// number of milliseconds to wait before automatically closing hints mode
hints_auto_exit_delay = 500;

// display the url before going to it in hints mode
hints_display_url_panel = true;

// don't use a homepage
homepage = "about:blank";

// keep the found item selected after search mode ends
isearch_keep_selection = true;

// always use autocompletion in the minibuffer
minibuffer_auto_complete_default = true;

// automatically load saved session on startup
session_auto_save_auto_load = true;

// have the find-url prompt included history urls in its completions
url_completion_use_history = false;

// use a single window, even when external programs open a url in conkeror
url_remoting_fn = load_url_in_new_buffer;

// automatically follow "did you mean" links on wikipedia search pages
wikipedia_enable_didyoumean = true;

// xkcd-mode will scrape the alt text from the xkcd comic and insert it into
// the page below the comic.
xkcd_add_title = true;

//// Keybindings

define_key(content_buffer_normal_keymap, "d", "follow-new-buffer");

//// Webjumps

define_webjump("imdb", "http://imdb.com/find?q=%s");
define_webjump("cpan", "http://search.cpan.org/search?query=%s&mode=all");
define_webjump("youtube", "http://www.youtube.com/results?search_query=%s&search=Search");
define_webjump("trans", "http://translate.google.com/translate_t#auto|en|%s");
define_webjump("isohunt", "http://isohunt.com/torrents/?ihq=%s")
define_webjump("scroogle", "https://ssl.scroogle.org/cgi-bin/nbbwssl.cgi?Gw=%s");
define_webjump("wikipedia_sv", "http://sv.wikipedia.org/w/index.php?title=Special%3AS%C3%B6k&search=%s");

// XXX: this isn't officially supported, but it works for now
webjumps["g"] = webjumps["google"];
// webjumps["g"] = webjumps["scroogle"];
webjumps["gl"] = webjumps["lucky"];
webjumps["y"] = webjumps["youtube"];
webjumps["w"] = webjumps["wikipedia"];
webjumps["ws"] = webjumps["wikipedia_sv"];

//// Open Middle-Clicked Links in New Buffers

require("clicks-in-new-buffer.js");
// Set to either OPEN_NEW_BUFFER or OPEN_NEW_BUFFER_BACKGROUND
clicks_in_new_buffer_target = OPEN_NEW_BUFFER_BACKGROUND;

//// Use 1-10 for Google results

require("page-modes/google-search-results.js");
google_search_bind_number_shortcuts();

//// Mode-line

remove_hook("mode_line_hook", mode_line_adder(clock_widget));
remove_hook("mode_line_hook", mode_line_adder(current_buffer_scroll_position_widget));

add_hook("mode_line_hook", mode_line_adder(buffer_count_widget), true);
add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);

//// Passwords

// http://kb.mozillazine.org/About:config_entries#Signon..2A
session_pref("signon.rememberSignons", true);
session_pref("signon.expireMasterPassword", false);
session_pref("signon.SignonFileName", "signons.txt");
Components.classes["@mozilla.org/login-manager;1"]
    .getService(Components.interfaces.nsILoginManager);

//// Remember the last save directory for downloads

// FIXME

//// org-remember.el support.

function org_store_link (url, title, window) {
    var cmd_str = 'emacsclient \"org-protocol://store-link://'+url+'/'+title+'\"';
    if (window != null) {
      window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-store-link", "Stores [[url][title]] as org link and copies url to emacs kill ring",
          function (I) {
              org_store_link(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), I.window);
          });

function org_remember (url, title, selection, window) {
    var cmd_str = 'emacsclient \"org-protocol://remember://w/'+url+'/'+title+'/'+selection+'\"';
    if (window != null) {
      window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-remember", "Clip url, title, and selection to remember via org-protocol",
          function (I) {
              org_remember(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), encodeURIComponent(I.buffer.top_frame.getSelection()), I.window);
          });

define_key(content_buffer_normal_keymap, "C-c r", "org-remember");
define_key(content_buffer_normal_keymap, "C-c l", "org-store-link");

/////////////////////////////////////////////////////////////////////////

function content_handler_save_in (path, inhibit_prompt) {
    path = make_file(path);
    return function (ctx) {
        var file;
        var suggested_path = path.clone();
        suggested_path.append(ctx.launcher.suggestedFileName);
        if (inhibit_prompt)
            file = suggested_path;
        else
            file = yield ctx.window.minibuffer.read_file_check_overwrite(
                $prompt = "Save to file:",
                $initial_value = suggested_path.path,
                $select);
        register_download(ctx.buffer, ctx.launcher.source);
        ctx.launcher.saveToDisk(file, false);
    };
}

content_handlers.set("application/x-bittorrent",
                     content_handler_save_in("~/download/torrents/"));
